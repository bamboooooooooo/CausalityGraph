package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import function.GetTableName;
import object.TableData;
import type.ActivityPartition;
import type.Block;

public class ParameterModel {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		ArrayList<String> files = new ArrayList<String>();
		ArrayList<String> files1 = new ArrayList<String>();
		ArrayList<String> files2 = new ArrayList<String>();
		/*files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\EmergencySys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\SeparationSys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\MParachuteSys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\BParachuteSys.xml");*/
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\CalOne.xml");
		/*files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\CalTwo.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\StateMonitorSys.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\OverloadController.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\Radar.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\RemoteSensor.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\Components\\GNC.xml");*/
		files.addAll(files1);
		files.addAll(files2);
		ArrayList<String> bddFiles = new ArrayList<String>();
		bddFiles.add("C:\\Users\\wen\\Desktop\\XMI\\BDD.xml");
//		bddFiles.add("C:\\Users\\wen\\Desktop\\XMI\\eoBDD.xml");
		
		  /*List<TableData> tds = GetTableName.GTName(files1, files2); for
		 (TableData td : tds) { System.out.println(td.getName() + " " +
		  td.getChart()); }*/
		 
		generateParameterModel(files, bddFiles, "",
				"C:/Users/wen/Desktop/testData.txt");  //C:\\Users\\wen\\Desktop\\XMI\\SystemContext.xml
	}

	static String generateParameterModel(ArrayList<String> actFiles, ArrayList<String> bddFiles, String ibdFile,
			String dataFile) throws Exception {
		/*----------写入文件------------*/
		String filePath = "modelicamodels/mo/" + "Pars.mo";
		File file = new File(filePath);
		file.createNewFile();
		BufferedWriter writer = new BufferedWriter(new FileWriter(file));

		System.out.println("model Pars");
		writer.write("model Pars" + "\r\n");
		/*---------define data file   --------------*/
		System.out
				.println("  " + "parameter String file = Modelica.Utilities.Files.loadResource(\"" + dataFile + "\");");
		writer.write(
				"  " + "parameter String file = Modelica.Utilities.Files.loadResource(\"" + dataFile + "\");" + "\r\n");
        
		ArrayList<Block> externalComponents = IBDXMI.parseSystemContext(ibdFile);
		ArrayList<String> internalActFiles = new ArrayList<String>();
		ArrayList<String> externalActFiles = new ArrayList<String>();		
		for (String actFile : actFiles) {
			ArrayList<ActivityPartition> aps = ActXMI.parseActivityPartition(actFile);
			for (ActivityPartition ap : aps) {
				Boolean isExternal = false;
				for (Block component : externalComponents) {
					if (ap.classname.equals(component.blockName)) {
						externalActFiles.add(actFile);
						isExternal = true;
						break;
					}
				}
				if (!ap.classname.equals("StateMonitorSys") && !isExternal) {
					internalActFiles.add(actFile);
					break;
				}

			}
		}
		List<TableData> parameters = GetTableName.GTName(internalActFiles, externalActFiles);
		String type;
		for (TableData par : parameters) {
			if (par.getName().contains("[")) {
				int index = par.getName().indexOf("[");
				String name = par.getName().substring(0, index);
				type = BDDXMI.parseType(bddFiles, name);
				System.out.println("  " + type + " " + name + "[33];");
				writer.write("  " + type + " " + name + "[33];" + "\r\n");
			} else {
				type = BDDXMI.parseType(bddFiles, par.getName());
				System.out.println("  " + type + " " + par.getName() + ";");
				writer.write("  " + type + " " + par.getName() + ";" + "\r\n");
			}

		}

		System.out.println("equation");
		writer.write("equation" + "\r\n");
		/*-----------read data ------------*/
		for (TableData par : parameters) {
			if (par.getName().contains("[")) {
				int index = par.getName().indexOf("[");
				String name = par.getName().substring(0, index);
				type = BDDXMI.parseType(bddFiles, name);
				System.out.println(
						"  " + par.getName() + " = ExternalData.readArrayParameter(file,\"" + par.getName() + "\");");
				writer.write("  " + par.getName() + " = ExternalData.readArrayParameter(file,\"" + par.getName()
						+ "\");" + "\r\n");
			} else {
				type = BDDXMI.parseType(bddFiles, par.getName());
				switch (type) {
				case "Integer":
					System.out.println("  " + par.getName() + " = ExternalData.readIntegerParameter(file,\""
							+ par.getName() + "\");");
					writer.write("  " + par.getName() + " = ExternalData.readIntegerParameter(file,\"" + par.getName()
							+ "\");" + "\r\n");
					break;
				case "Real":
					System.out.println("  " + par.getName() + " = ExternalData.readRealParameter(file,\""
							+ par.getName() + "\");");
					writer.write("  " + par.getName() + " = ExternalData.readRealParameter(file,\"" + par.getName()
							+ "\");" + "\r\n");
					break;
				case "Boolean":
					System.out.println("  " + par.getName() + " = ExternalData.readBooleanParameter(file,\""
							+ par.getName() + "\");");
					writer.write("  " + par.getName() + " = ExternalData.readBooleanParameter(file,\"" + par.getName()
							+ "\");" + "\r\n");
					break;
				}
			}

		}

		System.out.println("end Pars;");
		writer.write("end Pars;" + "\r\n");
		writer.flush();
		writer.close();
		return filePath;
	}
}
