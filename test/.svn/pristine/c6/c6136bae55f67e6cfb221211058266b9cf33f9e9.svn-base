package function;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import object.Chart;
import object.DecNode;
import object.Keys;
import object.NNode;
import object.P_Keys;
import object.T_Keys;

public class Graph {
	String filepath = null;
	String imgpath = null;
	String dotpath = "D:/Program Files/Graphviz2.37/bin/dot.exe"; // 程序路径

	public void createDotFile(List<List<P_Keys>> list, String filename, String imgname, List<Keys> list1, // list1依赖关系
			List<T_Keys> T_list) { // T_list时间依赖关系
		filepath = "C:/Users/Z_H/Desktop/doc/" + filename + ".doc";
		File file = new File(filepath);
		FileWriter fw = null;
		BufferedWriter writer = null;
		if (file.exists()) {
			file.delete();
		}
		try {
			file.createNewFile();
			fw = new FileWriter(file);
			writer = new BufferedWriter(fw);
			// 开始写文件
			writer.write("digraph G{");
			writer.newLine();
			int j = 0;
			for (List<P_Keys> list_k : list) {
				for (int i = 0; i < list_k.size() - 1; i++) {
					int a = 0;
					int b = 0;
					P_Keys k1 = list_k.get(i);
					String value1 = k1.getValue();
					String bool1 = k1.getBool();
					NNode node1 = k1.getNode();
					String first = null;
					String next = null;
					String one_id = node1.getId() + j;
					// String one_type = k.getOne().getType();
					for (T_Keys t : T_list)
						if (t.getOne().getName().equals(node1.getName())) {
							a = 1;
							NNode node3 = t.getTwo().get(0);
							NNode node4 = t.getTwo().get(1);
							first = "{\"" + node1.getChart() + ":" + node1.getName() + "\n  id: "
									+ one_id.substring(one_id.length() - 4, one_id.length()) + "\n  boolean: " + bool1
									+ "\n  value: " + value1 + "\n " + node3.getChart() + ":" + node3.getName() + "\n "
									+ node4.getChart() + ":" + node4.getName() + "\"}";
						}
					if (a == 0)
						for (Keys t : list1)
							if (t.getOne().getName().equals(node1.getName())) {
								b = 1;
								NNode node3 = t.getTwo();
								first = "{\"" + node1.getChart() + ":" + node1.getName() + "\n  id: "
										+ one_id.substring(one_id.length() - 4, one_id.length()) + "\n  boolean: "
										+ bool1 + "\n  value: " + value1 + "\n " + node3.getChart() + ":"
										+ node3.getName() + "\"}";
							}
					if (a == 0 && b == 0)
						first = "{\"" + node1.getChart() + ":" + node1.getName() + "\n  id: "
								+ one_id.substring(one_id.length() - 4, one_id.length()) + "\n  boolean: " + bool1
								+ "\n  value: " + value1 + "\"}";
					String symbol = " -> ";
					a = 0;
					b = 0;
					P_Keys k2 = list_k.get(i + 1);
					String value2 = k2.getValue();
					String bool2 = k2.getBool();
					NNode node2 = k2.getNode();
					int c = j + 1;
					String two_id = node2.getId() + c;
					// String two_type = k.getTwo().getType();
					for (T_Keys t : T_list)
						if (t.getOne().getName().equals(node2.getName())) {
							a = 1;
							NNode node3 = t.getTwo().get(0);
							NNode node4 = t.getTwo().get(1);
							next = "{\"" + node2.getChart() + ":" + node2.getName() + "\n  id: "
									+ two_id.substring(two_id.length() - 4, two_id.length()) + "\n  boolean: " + bool2
									+ "\n  value: " + value2 + "\n " + node3.getChart() + ":" + node3.getName() + "\n "
									+ node4.getChart() + ":" + node4.getName() + "\"}";
						}
					if (a == 0)
						for (Keys t : list1)
							if (t.getOne().getName().equals(node2.getName())) {
								b = 1;
								NNode node3 = t.getTwo();
								next = "{\"" + node2.getChart() + ":" + node2.getName() + "\n  id: "
										+ two_id.substring(two_id.length() - 4, two_id.length()) + "\n  boolean: "
										+ bool2 + "\n  value: " + value2 + "\n " + node3.getChart() + ":"
										+ node3.getName() + "\"}";
							}
					if (a == 0 && b == 0)
						next = "{\"" + node2.getChart() + ":" + node2.getName() + "\n  id: "
								+ two_id.substring(two_id.length() - 4, two_id.length()) + "\n  boolean: " + bool2
								+ "\n  value: " + value2 + "\"}";
					writer.write(first + symbol + next);
					j++;
				}
			}
			writer.newLine();
			writer.write("}");
			writer.flush();

			generateImageFile(imgname);
		} catch (

		IOException e) {
			e.printStackTrace();
		} finally {
			try {
				writer.close();
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
	}

	public void generateImageFile(String imgname) {
		imgpath = "C:/Users/Z_H/Desktop/graph/" + imgname + ".png";
		Runtime rt = Runtime.getRuntime();// java的API，获得一个对象  
		try {
			String a = dotpath + " " + filepath + " " + "-Tpng" + " " + "-o " + imgpath;
			rt.exec(a);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // 找到这个路径直接调用即可 
	}
}
