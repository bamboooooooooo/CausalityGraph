package UI;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import Function.CheckCSV;
import Function.CreateTxt;
import Function.GenerateCSV;
import Function.ReadData;
import JDBC.ReadTableData;
import Object.basicpath;

public class showdata extends JFrame {

	private JPanel contentPane;
	private DefaultTableModel tableModel;
	private JTable table;
	private JScrollPane scrollPane;
	List<List<String>> data = new ArrayList();
	List<String> vals = new ArrayList();
	Vector vName = new Vector();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					showdata frame = new showdata();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public showdata() {
		setTitle("\u57FA\u672C\u8DEF\u5F84");
		setBounds(100, 100, 728, 457);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);

		JSeparator separator = new JSeparator();
		// 单条数据生成
		JButton btnSingleDataExport = new JButton("Single data export ");
		btnSingleDataExport.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int index = table.getSelectedRow();
				List<String> d = data.get(index);
				if (d != null) {
					new CreateTxt().createtxt(d,vals);}
			}
		});

		scrollPane = new JScrollPane();
		// 批量运行
		JButton btnBatchDataOperation = new JButton("Batch data operation ");
		btnBatchDataOperation.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				for(String v: vals)
					for(List<String> d : data){
						int index = Integer.parseInt(d.get(0));
						new GenerateCSV().GenerateCSVByNo(index);
						String url="D:/PathData/Data/" + index + ".csv";
						File file = new File(url);
						try {
							while(!new CheckCSV().IsTime160(file)){
								new GenerateCSV().GenerateCSVByNo(index);
							}
						} catch (Exception e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
			}
		});
		// 单条运行
		JButton btnNewButton = new JButton("Single data operation");
		btnNewButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int index = table.getSelectedRow() + 1;
				new GenerateCSV().GenerateCSVByNo(index);
				String url = "D:/PathData/Data/" + index + ".csv";
				File file = new File(url);
				try {
					while (!new CheckCSV().IsTime160(file))
						new GenerateCSV().GenerateCSVByNo(index);
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		
		JButton btnVisualization = new JButton("Visualization ");
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 673, GroupLayout.PREFERRED_SIZE)
							.addContainerGap())
						.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
							.addGroup(gl_contentPane.createSequentialGroup()
								.addComponent(separator, GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
								.addContainerGap())
							.addGroup(gl_contentPane.createSequentialGroup()
								.addComponent(btnNewButton)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(btnBatchDataOperation)
								.addPreferredGap(ComponentPlacement.RELATED)
								.addComponent(btnSingleDataExport)
								.addPreferredGap(ComponentPlacement.RELATED)
								.addComponent(btnVisualization)
								.addGap(25)))))
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGap(16)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnVisualization)
						.addComponent(btnSingleDataExport)
						.addComponent(btnBatchDataOperation)
						.addComponent(btnNewButton))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(separator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
					.addContainerGap())
		);

		table = new JTable();
		table.setOpaque(false);
		table.setBackground(Color.WHITE);
		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		Vector vData = new Vector();
		try {
			vals = new ReadTableData().GTName();
		} catch (SQLException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		vName = new Vector();
		vName.add("No");
		for (String v : vals)
			vName.add(v);

		data = new ArrayList();
		try {
			data = new ReadTableData().GetData();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		for (List<String> b : data) {
			Vector vRow = new Vector();
			for (int i = 0; i < b.size(); i++)
				vRow.add(b.get(i));
			vData.add(vRow.clone());
		}
		DefaultTableModel model = new DefaultTableModel(vData, vName);
		table.setModel(model);
		/*
		 * table.setModel(new DefaultTableModel( new Object[][] { {"12", "7",
		 * "5", "1", "0", "0", "12", null, null, null, null, null, "13", "7",
		 * "5", "1000"}, {"12", "7", "5", "1", "0", "0", "12", null, null, null,
		 * null, null, "13", "7", "5", "800"}, }, new String[] { "B:T_gkb",
		 * "B:T_gkbTime", "A:Tab", "B:WorkMode", "C:GZMode", "C:AccType",
		 * "C:a1", "C:a2", "C1:LD_Elevation", "C1:notHandled", "C1:available",
		 * "Z:GZValue", "Z:GZValueTime", "Z:GZValueTime", "Z:T",
		 * "C2:LD_Elevation" } ) { Class[] columnTypes = new Class[] {
		 * String.class, Object.class, Object.class, Object.class, Object.class,
		 * Object.class, Object.class, Object.class, Object.class, Object.class,
		 * Object.class, Object.class, Object.class, Object.class, Object.class,
		 * Object.class }; public Class getColumnClass(int columnIndex) { return
		 * columnTypes[columnIndex]; } });
		 * 
		 * table.getColumnModel().getColumn(1).setPreferredWidth(90);
		 * table.getColumnModel().getColumn(2).setPreferredWidth(100);
		 * table.getColumnModel().getColumn(6).setPreferredWidth(49);
		 * table.getColumnModel().getColumn(7).setPreferredWidth(48);
		 * table.getColumnModel().getColumn(8).setPreferredWidth(106);
		 * table.getColumnModel().getColumn(9).setPreferredWidth(101);
		 * table.getColumnModel().getColumn(10).setPreferredWidth(92);
		 * table.getColumnModel().getColumn(11).setPreferredWidth(85);
		 * table.getColumnModel().getColumn(12).setPreferredWidth(100);
		 * table.getColumnModel().getColumn(13).setPreferredWidth(101);
		 * table.getColumnModel().getColumn(14).setPreferredWidth(111);
		 */
		scrollPane.setViewportView(table);
		contentPane.setLayout(gl_contentPane);
	}
}
