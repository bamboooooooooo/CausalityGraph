package main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

import function.GetTableName;
import object.TableData;
import type.ActivityPartition;
import type.Block;
import type.Correspondence;
import type.SAAction;
import type.SequenceOrder;

public class SystemModel1 {
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		ArrayList<String> files1 = new ArrayList<String>();
		ArrayList<String> files2 = new ArrayList<String>();
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\EmergencySys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\SeparationSys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\MParachuteSys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\BParachuteSys.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\CalOne.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\CalTwo.xml");
		files1.add("C:\\Users\\wen\\Desktop\\XMI\\StateMonitorSys.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\OverloadController.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\Radar.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\RemoteSensor.xml");
		files2.add("C:\\Users\\wen\\Desktop\\XMI\\GNC.xml");
		generateSystemModel("C:\\Users\\wen\\Desktop\\XMI\\SystemComposition1.xml","C:\\Users\\wen\\Desktop\\XMI\\SystemContext.xml",files1,files2,"C:\\Users\\wen\\Desktop\\XMI\\SystemActivity.xml");
	}
	
	static String generateSystemModel(String bddFilePath, String ibdFilePath, ArrayList<String> actFilePaths1, ArrayList<String> actFilePaths2,String sysActivityFile) throws Exception {
		String filePath = ""; //文件的路径
		ArrayList<String> actFilePaths = new ArrayList<String>();
		actFilePaths.addAll(actFilePaths1);
		actFilePaths.addAll(actFilePaths2);
        //declare component
		ArrayList<Block> blocks = BDDXMI.parseSystemComposition(bddFilePath);
		Block rootBlock = findRootBlock(blocks);
		//写入文件
		filePath = "modelicamodels/mo/" + rootBlock.blockName + ".mo";
		File file = new File(filePath);
		file.createNewFile();
		BufferedWriter writer = new BufferedWriter(new FileWriter(file));
		//系统模型开始
		System.out.println("model " + rootBlock.blockName);
		writer.write("model " + rootBlock.blockName + "\r\n");
		for(Block b:blocks){
			if(!b.id.equals(rootBlock.id))
			System.out.println("  " + b.blockName + " " + b.role + ";");
			writer.write("  " + b.blockName + " " + b.role + ";" + "\r\n");
		}
		
		//declare external Object
		ArrayList<Block> externalObjects = IBDXMI.parseSystemContext(ibdFilePath);
		for(Block b:externalObjects){
			if(!b.blockName.equals(rootBlock.blockName))
			System.out.println("  " + b.blockName + " " + b.role + ";");
			writer.write("  " + b.blockName + " " + b.role + ";" + "\r\n");
		}
		
		
		//Equation section
		System.out.println("equation");
		writer.write("equation" + "\r\n");
		//Parameters binding
		List<TableData> parameters = GetTableName.GTName(actFilePaths1,actFilePaths2);
		for(TableData par:parameters){
			for(Block b:blocks){
				if(b.blockName.equals(par.getChart())){
					System.out.println("  " + b.role + "." + par.getName() + "= p." + par.getName()+";");
					writer.write("  " + b.role + "." + par.getName() + "= p." + par.getName()+";" + "\r\n");
					break;
				}
			}
			for(Block b:externalObjects){
				if(b.blockName.equals(par.getChart())){
					if(par.getName().contains("Time")){
						System.out.println("  "+ b.role + "." + par.getName() + "= p." + par.getName()+";");
						writer.write("  "+ b.role + "." + par.getName() + "= p." + par.getName()+";" + "\r\n");
					}else{
						String upper = par.getName().toUpperCase();
						System.out.println("  "+ b.role + "." + upper + "= p." + par.getName()+";");
						writer.write("  "+ b.role + "." + upper + "= p." + par.getName()+";" + "\r\n");
					}					
					break;
				}
			}
			
		}				
		
		//SendSignalAction, AcceptEventAction Binding
		ArrayList<SAAction> ssActions = ActXMI.parseSendSignalAction(actFilePaths);
		ArrayList<SAAction> seActions = ActXMI.parseAcceptEventAction(actFilePaths);
		ArrayList<Block> ownerBlocks = new ArrayList<Block>();
		ownerBlocks.addAll(blocks);
		ownerBlocks.addAll(externalObjects);
		ssActions = changeOwner(ssActions,ownerBlocks);
		seActions = changeOwner(seActions,ownerBlocks);
		
		for(SAAction se:seActions){
			for(SAAction ss:ssActions){
				if(se.name.equals(ss.name)){
					System.out.println("  " + se.owner +"." + se.name + " =" + ss.owner +"." + ss.name + ";");
					writer.write("  " + se.owner +"." + se.name + " =" + ss.owner +"." + ss.name + ";" + "\r\n");
				}
			}
		}
		//Sequential order
		ArrayList<Correspondence> correspondences = ActXMI.parsePACorrespondence(actFilePaths);
		ArrayList<SequenceOrder> sequenceOrders = ActXMI.parseSequenceOrder(sysActivityFile);
		correspondences = addRole(correspondences,ownerBlocks);
		sequenceOrders = addRoleOfAct(sequenceOrders,correspondences);
		for(SequenceOrder so:sequenceOrders){
			if(so.preActivityRole.size()>1){
				int i = 1;
			    for(String pre:so.preActivityRole){			
			    	System.out.println("  " + so.activityRole + ".preIsFinish" + i + "= " + pre + ".isFinish;");
			    	writer.write("  " + so.activityRole + ".preIsFinish" + i + "= " + pre + ".isFinish;" + "\r\n");
			    	i++;
			    }
			}else if(so.preActivityRole.size()==1){
				System.out.println("  " + so.activityRole + ".preIsFinish"  + "= " + so.preActivityRole.get(0) + ".isFinish;");
				writer.write("  " + so.activityRole + ".preIsFinish"  + "= " + so.preActivityRole.get(0) + ".isFinish;" + "\r\n");
			}
			
		}
		System.out.println("end " + rootBlock.blockName + ";");	
		writer.write("end " + rootBlock.blockName + ";" + "\r\n");
		writer.flush();
		writer.close();
		return filePath;
	}
	//find root block of system
	static Block findRootBlock(ArrayList<Block> blocks){
		Block rootBlock = new Block();
		for(Block b:blocks){
			if (b.isRoot){
				rootBlock = b;
				break;
			}
		}
		return rootBlock;		
	}
	//change the owner of SendSignalAction and AcceptEventAction
	static ArrayList<SAAction> changeOwner(ArrayList<SAAction> actions, ArrayList<Block> blocks){
		ArrayList<SAAction> changedActions = new ArrayList<SAAction>();
		for(SAAction a:actions){
			for(Block b:blocks){
				if(a.owner.equals(b.blockName)){
					a.owner = b.role;
					break;
				}
			}
			changedActions.add(a);
		}
		
		return changedActions;		
	}
	//add role of partition
	static ArrayList<Correspondence> addRole(ArrayList<Correspondence> correspondences, ArrayList<Block> blocks){
		ArrayList<Correspondence> changedcorrespondences = new ArrayList<Correspondence>();
		for(Correspondence c:correspondences){
			for(Block b:blocks){
				if(c.partition.equals(b.blockName)){
					c.role = b.role;
					break;
				}
			}
			changedcorrespondences.add(c);
		}
		
		return changedcorrespondences;		
	}
	//add role of activity and preActivity
	static ArrayList<SequenceOrder> addRoleOfAct(ArrayList<SequenceOrder> sequenceOrders, ArrayList<Correspondence> changedcorrespondences){
		ArrayList<SequenceOrder> changedSequenceOrders = new ArrayList<SequenceOrder>();
		for(SequenceOrder so:sequenceOrders){
			for(Correspondence c:changedcorrespondences){
				if(c.activity.equals(so.activity)){
					so.activityRole = c.role;
					break;
				}
			}
			for(String pre:so.preActivity){
				for(Correspondence c:changedcorrespondences){
					if(c.activity.equals(pre)){
						so.preActivityRole.add(c.role);
						break;
					}
				}
			}
		  changedSequenceOrders.add(so);
		}			
		return changedSequenceOrders;
	}
	
	//get all internal component names
	static ArrayList<String> getAllComponentNames(ArrayList<String> coActFiles) throws Exception{
		ArrayList<String> components = new ArrayList<String>();
		//add component name
				for(String actFile:coActFiles){
					ArrayList<ActivityPartition> aps = new ArrayList<ActivityPartition>();
					aps = ActXMI.parseActivityPartition(actFile);
					for(ActivityPartition ap:aps){
						components.add(ap.classname);
					}
				}
		return components;		
	}
	
	//get all external component names
		static ArrayList<String> getAllExternalObjectNames(ArrayList<String> eoActFiles) throws Exception{
			ArrayList<String> externalObjects = new ArrayList<String>();
			//add component name
					for(String actFile:eoActFiles){
						ArrayList<ActivityPartition> aps = new ArrayList<ActivityPartition>();
						aps = ActXMI.parseActivityPartition(actFile);
						for(ActivityPartition ap:aps){
							externalObjects.add(ap.classname);
						}
					}
			return externalObjects;		
		}
}
